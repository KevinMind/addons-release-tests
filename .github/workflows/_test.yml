name: E2E Test

description: Run an E2E test suite

env:
  test_results_path: coverage-devhub-tests-results.html

on:
  workflow_dispatch:
    inputs:
      artifact_name:
        description: 'Name for the uploaded artifact'
        required: false
        default: 'test-results'
      pytest_marker:
        description: 'Pytest marker expression (-m)'
        required: false
        default: ''
      pytest_parallel:
        description: 'The number of parallel tests to run'
        required: false
        default: '1'
      pytest_path:
        description: 'The path to the test to run'
        required: true
        default: ''
      pytest_report:
        description: 'Name for the HTML report file'
        required: false
        default: 'test-results.html'
      pytest_reruns:
        description: 'The number of times to rerun the tests'
        required: false
        default: '2'
      pytest_variables:
        description: 'The path to the variables file'
        type: choice
        required: true
        options:
          - dev.json
          - stage.json
          - prod.json
      python_version:
        description: 'The Python version to use'
        required: false
        default: '3.11'
  workflow_call:
    inputs:
      artifact_name:
        required: true
        type: string
      pytest_marker:
        required: false
        type: string
        default: ''
      pytest_parallel:
        required: true
        type: string
      pytest_path:
        required: true
        type: string
      pytest_report:
        required: true
        type: string
      pytest_reruns:
        required: true
        type: string
      pytest_variables:
        required: true
        type: string
      python_version:
        required: false
        type: string
        default: '3.11'
jobs:
  test:
    name: ${{ inputs.pytest_report }}
    runs-on: ubuntu-latest
    # Environment variables used by pages/desktop/frontend/login.py
    env:
      REGULAR_USER_EMAIL: ${{ secrets.REGULAR_USER_EMAIL }}
      REGULAR_USER_PASSWORD: ${{ secrets.REGULAR_USER_PASSWORD }}
      ADMIN_USER_EMAIL: ${{ secrets.ADMIN_USER_EMAIL }}
      ADMIN_USER_PASSWORD: ${{ secrets.ADMIN_USER_PASSWORD }}
      DEVELOPER_EMAIL: ${{ secrets.DEVELOPER_EMAIL }}
      DEVELOPER_PASSWORD: ${{ secrets.DEVELOPER_PASSWORD }}
      REUSABLE_USER_EMAIL: ${{ secrets.REUSABLE_USER_EMAIL }}
      REUSABLE_USER_PASSWORD: ${{ secrets.REUSABLE_USER_PASSWORD }}
      RATING_USER_EMAIL: ${{ secrets.RATING_USER_EMAIL }}
      RATING_USER_PASSWORD: ${{ secrets.RATING_USER_PASSWORD }}
      COLLECTION_USER_EMAIL: ${{ secrets.COLLECTION_USER_EMAIL }}
      COLLECTION_USER_PASSWORD: ${{ secrets.COLLECTION_USER_PASSWORD }}
      SUBMISSIONS_USER_EMAIL: ${{ secrets.SUBMISSIONS_USER_EMAIL }}
      SUBMISSIONS_USER_PASSWORD: ${{ secrets.SUBMISSIONS_USER_PASSWORD }}
      API_USER_EMAIL: ${{ secrets.API_USER_EMAIL }}
      API_USER_PASSWORD: ${{ secrets.API_USER_PASSWORD }}
      STAFF_USER_EMAIL: ${{ secrets.STAFF_USER_EMAIL }}
      STAFF_USER_PASSWORD: ${{ secrets.STAFF_USER_PASSWORD }}
      RESTRICTED_USER_EMAIL: ${{ secrets.RESTRICTED_USER_EMAIL }}
      RESTRICTED_USER_PASSWORD: ${{ secrets.RESTRICTED_USER_PASSWORD }}
      REVIEWER_TOOLS_USER_EMAIL: ${{ secrets.REVIEWER_TOOLS_USER_EMAIL }}
      REVIEWER_TOOLS_USER_PASSWORD: ${{ secrets.REVIEWER_TOOLS_USER_PASSWORD }}
      DEVELOPER_USER_KEY_DEV: ${{ secrets.DEVELOPER_USER_KEY_DEV }}
      RATING_USER_KEY_DEV: ${{ secrets.RATING_USER_KEY_DEV }}
      SUBMISSIONS_USER_KEY_DEV: ${{ secrets.SUBMISSIONS_USER_KEY_DEV }}
      API_USER_KEY_DEV: ${{ secrets.API_USER_KEY_DEV }}
      STAFF_USER_KEY_DEV: ${{ secrets.STAFF_USER_KEY_DEV }}
      DEVELOPER_USER_KEY_STAGE: ${{ secrets.DEVELOPER_USER_KEY_STAGE }}
      RATING_USER_KEY_STAGE: ${{ secrets.RATING_USER_KEY_STAGE }}
      SUBMISSIONS_USER_KEY_STAGE: ${{ secrets.SUBMISSIONS_USER_KEY_STAGE }}
      API_USER_KEY_STAGE: ${{ secrets.API_USER_KEY_STAGE }}
      STAFF_USER_KEY_STAGE: ${{ secrets.STAFF_USER_KEY_STAGE }}
      REVIEWER_TOOLS_USER_KEY: ${{ secrets.REVIEWER_TOOLS_USER_KEY }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
        cache: 'pip'

    - name: Install requirements
      run: pip install --no-deps -r requirements.txt

    - name: Install geckodriver and Firefox
      uses: browser-actions/setup-firefox@v1
      with:
        firefox-version: latest

    - name: Verify Firefox Installation
      shell: bash
      run: |
        echo Installed Firefox version:
        which firefox
        firefox --version

    - name: Install Setup Tools
      run: pip install setuptools

    - name: Test context
      id: test_context
      shell: bash
      run: |
        IFS=',' read -ra items <<< "${{ inputs.pytest_variables }}"
        variables=""
        for item in "${items[@]}"; do
          variables+="--variables $item "
        done

        echo "variables=$variables" >> "$GITHUB_OUTPUT"
        cat "$GITHUB_OUTPUT"

    - name: Run tests
      timeout-minutes: 30
      shell: bash
      env:
        MOZ_HEADLESS: 1
      run: |
        python -m pytest ${{ inputs.pytest_path }} \
          -n ${{ inputs.pytest_parallel }} \
          -m "${{ inputs.pytest_marker }}" \
          --reruns ${{ inputs.pytest_reruns }} \
          --driver Firefox \
          ${{ steps.test_context.outputs.variables }} \
          --html=${{ inputs.pytest_report }} \
          --self-contained-html \
          -vs \
          --tb=short

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.pytest_report }}

